#define char_TI_TOK
#define bcall(x) rst 28h \ .dw x
#include "single.inc"
curKey  =80F6h
keyCount=80F7h

gbuf        = 9340h
_VPutS      = 4561h
_VPutMap    = 455Eh
_GrBufCpy   = 486Ah
_InvertRect = 4D5Fh
penCol      = 86D7h
penRow      = 86D8h
sGrFlags    = 14h
textWrite   = 7
flags       =89F0h
fontFlags     = 32h
fracDrawLFont = 2
_GrBufClr     = 4BD0h
_PutS         = 450Ah
_NewLine      = 452Eh
.db $BB,$6D
.org $9D95
  bcall(_GrBufClr)
  res fracDrawLFont,(iy + fontFlags)
  set textWrite,(iy + sGrFlags)
  ld hl,0
  ld (penCol),hl
;
;

  call testputs \ .db "tan(1/(2pi))=",0
  ld hl,const_2pi_inv
  ld bc,8800h
  call pow2Single
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  call testputs \ .db "ln(1/(2pi))=",0
  ld hl,const_2pi_inv
  ld bc,8800h
  call pow10Single
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  call testputs \ .db "cosh(1/(2pi))=",0
  ld hl,const_2pi_inv
  ld bc,8800h
  call coshSingle
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  bcall(_GrBufCpy)
  ret
;test_cmp:
;  call cmpSingle
;  ld hl,s_eq
;  jr z,+_
;  ld hl,s_gt
;  jr nc,+_
;  ld hl,s_lt
;_:
;  jr puts
testputs:
  ex (sp),hl
  call puts
  ex (sp),hl
  ret
puts:
  push de
  push bc
  push af
  bcall(_VPutS)
  pop af
  pop bc
  pop de
  ret
newline:
  ld hl,(penCol)
  ld l,0
  ld a,6
  add a,h
  ld h,a
  ld (penCol),hl
  ret

s_eq: .db "Equal",0
s_gt: .db "Greater",0
s_lt: .db "Less",0
__:
#include "addSingle.z80"
#include "sinSingle.z80"
#include "cosSingle.z80"
#include "tanSingle.z80"
#include "mulSingle.z80"
#include "mul10Single.z80"
#include "mulSingle_p375.z80"
#include "mulSingle_p34375.z80"
#include "mulSingle_p041015625.z80"
#include "rsubSingle.z80"
#include "subSingle.z80"
#include "constants.z80"
#include "expSingle.z80"
#include "powSingle.z80"
#include "pow2Single.z80"
#include "pow10Single.z80"
#include "divSingle.z80"
#include "divSingle_special.z80"
#include "logSingle.z80"
#include "lnSingle.z80"
#include "lgSingle.z80"
#include "log10Single.z80"
#include "single2char.z80"
#include "single2str.z80"
#include "single2TI.z80"
#include "str2single.z80"
#include "routines/ascii_to_uint8.z80"
#include "routines/mov4.z80"
#include "routines/sqrt16.z80"
#include "routines/sqrtHLIX.z80"
#include "lut.z80"
#include "absSingle.z80"
#include "acosSingle.z80"
#include "asinSingle.z80"
#include "atanSingle.z80"
#include "acoshSingle.z80"
#include "asinhSingle.z80"
#include "atanhSingle.z80"
#include "ameanSingle.z80"
#include "geomeanSingle.z80"
#include "sqrtSingle.z80"
#include "cmpSingle.z80"
#include "bgiSingle.z80"
#include "bg2iSingle.z80"   ;slightly faster version for ln(x), can omit and use bgiSingle instead :)
#include "randSingle.z80"
#include "coshSingle.z80"
#include "sinhSingle.z80"
#include "tanhSingle.z80"
#include "negSingle.z80"
#include "ti2single.z80"
#include "single2char.z80"
#include "mod1Single.z80"

.echo $-__," bytes"
