#define char_TI_TOK
#define bcall(x) rst 28h \ .dw x
#include "../single/single.inc"
fontFlags     = 32h
fracDrawLFont = 2
_GrBufClr     = 4BD0h
_PutS         = 450Ah
_NewLine      = 452Eh
.db $BB,$6D
.org $9D95
  bcall(_GrBufClr)
  res fracDrawLFont,(iy + fontFlags)
  set textWrite,(iy + sGrFlags)
  ld hl,0
  ld (penCol),hl
;
;
  call testputs \ .db "FLOAT "
s_float:
  .db "3.14=",0
  ld hl,s_float
  ld bc,8800h
  call str2single
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  call testputs \ .db "sin(e)=",0
  ld hl,const_e
  ld bc,8800h
  call sinSingle
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  call testputs \ .db "cos(e)=",0
  ld hl,const_e
  ld bc,8800h
  call cosSingle
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline

  call testputs \ .db "tan(e)=",0
  ld hl,const_e
  ld bc,8800h
  call tanSingle
  ld h,b
  ld l,c
  ld bc,8000h
  call single2str
  ld h,b
  ld l,c
  call puts
  call newline


  bcall(_GrBufCpy)
  ret
test_cmp:
  ld hl,const_pi_
  ld de,const_pi
  call cmpSingle
  ld hl,s_eq
  jr z,+_
  ld hl,s_gt
  jr nc,+_
  ld hl,s_lt
_:
  jr puts
testputs:
  ex (sp),hl
  call puts
  ex (sp),hl
  ret
puts:
  push de
  push bc
  push af
  bcall(_VPutS)
  pop af
  pop bc
  pop de
  ret
newline:
  ld hl,(penCol)
  ld l,0
  ld a,6
  add a,h
  ld h,a
  ld (penCol),hl
  ret

;const_pi:     .db $DB,$0F,$49,$81
const_pi_:     .db $DF,$0F,$49,$81
s_eq: .db "Equal",0
s_gt: .db "Greater",0
s_lt: .db "Less",0
__:
#include "../single/sinSingle.z80"
#include "../single/cosSingle.z80"
#include "../single/tanSingle.z80"
#include "../single/mulSingle.z80"
#include "../single/mul10Single.z80"
#include "../single/mulSingle_p375.z80"
#include "../single/mulSingle_p34375.z80"
#include "../single/mulSingle_p041015625.z80"
#include "../single/addSingle.z80"
#include "../single/rsubSingle.z80"
#include "../single/subSingle.z80"
#include "../single/constants.z80"
#include "../single/pushpop.z80"
#include "../single/expSingle.z80"
#include "../single/powSingle.z80"
#include "../single/pow2Single.z80"
#include "../single/pow10Single.z80"
#include "../single/divSingle.z80"
#include "../single/divSingle_special.z80"
#include "../single/logSingle.z80"
#include "../single/lnSingle.z80"
#include "../single/lgSingle.z80"
#include "../single/log10Single.z80"
;#include "../single/single2char.z80"
#include "../single/single2str.z80"
#include "../single/single2TI.z80"
#include "../single/str2single.z80"
#include "../single/routines/ascii_to_uint8.z80"
#include "../single/lut.z80"
#include "../single/absSingle.z80"
#include "../single/acosSingle.z80"
#include "../single/asinSingle.z80"
#include "../single/atanSingle.z80"
#include "../single/acoshSingle.z80"
#include "../single/asinhSingle.z80"
#include "../single/atanhSingle.z80"
#include "../single/ameanSingle.z80"
#include "../single/geomeanSingle.z80"
#include "../single/sqrtSingle.z80"
#include "../single/cmpSingle.z80"
#include "../single/bgSingle.z80"
#include "../single/bg2iSingle.z80"   ;slightly faster version for ln(x), can omit and use bgiSingle instead :)
#include "../single/randSingle.z80"
#include "../single/rand.z80"
#include "../single/coshSingle.z80"
#include "../single/sinhSingle.z80"
#include "../single/tanhSingle.z80"
#include "../single/negSingle.z80"
#include "../single/ti2single.z80"
#include "../single/single2char.z80"
#include "../single/fpartSingle.z80"

.echo $-__," bytes"
