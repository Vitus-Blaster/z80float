xrand:
;Stores a pseudo-random number on [0,1)
;it won't produce values on (0,2^-63)
  push hl
  push de
  push bc
  push af
  push bc

  call rand
  ld (xOP1),hl
  call rand
  ld (xOP1+2),hl
  call rand
  ld (xOP1+4),hl
  call rand
  ld (xOP1+6),hl
  ld hl,$3FFF
  ld (xOP1+8),hl
  call normalizexOP1
;If we had to normalize, we should load in more random bits!
  ld hl,(xOP1+8)
  ld a,h    ;First, make sure it isn't zero.
  or l
  jr z,randdone
  ld a,l
  inc a
  jr z,randdone
  ld hl,xOP1
_:
  push hl
  push af
  call rand
  ex de,hl
  pop af
  pop hl
  ld (hl),d   ;loading it in backwards because why not ? Want it to be as random as possible anyways.
  add a,8
  jr c,randdone
  inc hl
  ld (hl),e
  inc hl
  add a,8
  jr nc,-_
randdone:
  pop de
  ld hl,xOP1
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret


randinit:
  ld a,r
  ld hl,seed0
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  xor (hl) \ ld (hl),a \ inc hl
  or 97   ;no particular reason
  or (hl) \ ld (hl),a
  ret
rand:
;;Tested and passes all CAcert tests
;;Uses a very simple 32-bit LCG and 32-bit LFSR
;;it has a period of 18,446,744,069,414,584,320
;;roughly 18.4 quintillion.
;;LFSR taps: 0,2,6,7  = 11000101
;;323cc
;;Thanks to Runer112 for his help on optimizing the LCG and suggesting to try the much simpler LCG. On their own, the two are terrible, but together they are great.
;Uses 64 bits of state
  ld hl,(seed0)
  ld de,(seed0+2)
  ld b,h
  ld c,l
  add hl,hl \ rl e \ rl d
  add hl,hl \ rl e \ rl d
  inc l
  add hl,bc
  ld (seed0),hl
  ld hl,(seed0+2)
  adc hl,de
  ld (seed0+2),hl
  ex de,hl
;;lfsr
  ld hl,(seed1)
  ld bc,(seed1+2)
  add hl,hl \ rl c \ rl b
  ld (seed1+2),bc
  sbc a,a
  and %11000101
  xor l
  ld l,a
  ld (seed1),hl
  ex de,hl
  add hl,bc
  ret
