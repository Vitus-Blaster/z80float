sub64:
;266cc
  or a
sbc64:
;262cc
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ sbc a,(hl) \ ld (de),a
  ret
rsub40:
  ld a,(de) \ sub (hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a
  ret
add64:
;266cc
  or a
adc64:
;262cc
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a \ inc de \ inc hl
  ld a,(de) \ adc a,(hl) \ ld (de),a
  ret
rsbc64:
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a
  ret
neg64:
  xor a
  ld c,a \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a
  ret
cmp64:
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret nz \ inc de \ inc hl
  ld a,(de) \ cp (hl) \ ret
srlxOP2_4:
  ld hl,xOP2+7
srl64_4:
  xor a
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd
  ret
srlxOP2:
  ld hl,xOP2+7
  srl (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
srlxOP1_mantissa:
;182cc
  ld hl,xOP1+7
srl64:
;172cc
  srl (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
rr64:
;172cc
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
mov10:
  ldi
mov9:
  ldi
mov8:
  ldi
mov7:
  ldi
mov6:
  ldi
mov5:
  ldi
mov4:
  ldi
  ldi
  ldi
  ldi
  ret
swapxOP2xOP3:
;370cc
  ld hl,(xOP2+8)
  ld de,(xOP3+8)
  ld (xOP3+8),hl
  ld (xOP2+8),de
swapxOP2xOP3_mantissa:
;298cc
  ld hl,(xOP2)
  ld de,(xOP3)
  ld (xOP3),hl
  ld (xOP2),de
  ld hl,(xOP2+2)
  ld de,(xOP3+2)
  ld (xOP3+2),hl
  ld (xOP2+2),de
  ld hl,(xOP2+4)
  ld de,(xOP3+4)
  ld (xOP3+4),hl
  ld (xOP2+4),de
  ld hl,(xOP2+6)
  ld de,(xOP3+6)
  ld (xOP3+6),hl
  ld (xOP2+6),de
  ret
setxOP1_inf:
  xor a
  ld h,a
  ld l,a
  dec a
  ld (xOP1+8),hl
  ld (xOP1+7),a
  ret
diRestore:
;Adds 151cc if interrupts are enabled, 161cc if disabled
;Disables interrupts, but sets up the stack so that interrupt settings are restored.
;Call this at the top of your routine that needs to disable interrupts :)
  ex (sp),hl
  push hl
  push af
  ld hl,restoreei
  ld a,r
  jp pe,+_
  ld hl,restoredi
_:
  di
  pop af
  inc sp
  inc sp
  ex (sp),hl
  dec sp
  dec sp
  ret
restoredi:
  di
  ret
restoreei:
  ei
  ret
normalizexOP1:
  ld a,(xOP1+7)
  add a,a
  ret c
_:
  ld hl,xOP1
  sla (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl)
  ld hl,(xOP1+8)
  dec hl
  ld (xOP1+8),hl
  jp p,-_
  ret
addmantissa0102:
  ld hl,xOP2
  ld de,xOP1
  call adc64
  ret nc
  ex de,hl
  call rr64
  ex de,hl
  call srl64
  ld hl,xOP1+8
  inc (hl)
  ret nz
  inc hl
  ld a,(hl)
  inc (hl)
  xor (hl)
  ret p
  jp constmul_overflow
