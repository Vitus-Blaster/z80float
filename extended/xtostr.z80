#define pow10exp  fpOP3+42
#define strout fpOP3+45
xtostr:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  pop de
  ld a,(hl)
  ldi
  or a
  jr nz,$-4
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  ld de,fpOP1
  call mov10
  ld de,(fpOP1+8)   ;this is the exponent and sign
  ld hl,strout
  bit 7,d
  jr z,+_
  res 7,d
  ld (hl),$1A    ;negative sign
  inc hl
_:
  ld a,d
  or e
  jp z,strcase
  ld (fpOP1+8),de   ;just making it positive
  ;Now we need to perform (DE-0x4000)*19728 (approximation of exponent*log10(2))
  ld bc,19728
  push hl       ;points to where the string is being written
  call mul16    ;when analyzing timing, note that the first iteration is guaranteed to skip
  ld hl,-4932
  add hl,de
  ld (pow10exp),hl
  ld de,pown10table
  jr c,+_
;the exponent is negative, need to be multiplying by 10^-exponent
  xor a
  sub l
  ld l,a
  sbc a,a
  sub h
  ld h,a
  ld de,pow10table   ;get the table of 10^-(2^k)
_:
  ld bc,fpOP1
  add hl,hl
  add hl,hl
  add hl,hl
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
  call xtostr_mul
;now the number is pretty close to a nice value
_:
  ld a,(fpOP1+8)
  add a,a
  jr nc,+_
  call fpOP1mul10
  ld hl,(pow10exp)
  dec hl
  ld (pow10exp),hl
  jr -_     ;For speed, could perform test here instead.
_:
;quick, convert to a fixed-point number !
  rra
  inc a
;  jr z,noadjustxtostr
  ;number of bits to shift
  ld b,a
  xor a
  ld (fpOP1+8),a
_:
  ld hl,fpOP1
  sla (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl)
  djnz -_
noadjustxtostr:
  ld a,(hl) ;the first digit, might be as large as twenty
  pop hl
  cp 10
  jr c,+_
  ld de,(pow10exp)
  dec de
  ld (hl),30h
  inc de \ inc (hl) \ sub 10 \ jr nc,$-4
  ld (pow10exp),de
  add a,10
  inc hl
_:
  add a,'0'
  ld (hl),a
  inc hl
  ld a,l
  cp (strout+20)&255
  jr z,+_
  push hl
  call xtostrmul10
  pop hl
  jr -_
_:
;now I need to format the string data
  push hl

  ld hl,(pow10exp)
  ;if -4<=HL<=10, then need to insert the decimal place somewhere.
  ld bc,4
  add hl,bc
  ld a,h
  or a
  jr nz,+_
  ld a,l
  cp 15
  jp c,movdec
_:
  ;for this, we need to insert the decimal after the first digit
  ;Then, we need to append the exponent string
  ld hl,strout
  ld de,strout-1
  ld a,(hl)
  ldi
  cp $1A    ;negative sign
  jr nz,$+4
  ldi
  ld a,'.'
  ld (de),a
;now we need count 15 digits, truncating the last ~4 decimal digits
  ld a,15
  add a,l
  ld l,a
  jr nc,$+3
  inc h
  ex (sp),hl
;Now we are going to round
  dec hl
  ld a,(hl)
  cp '5'
  jr c,strround_done
_:
  ld (hl),'0'
  dec hl
  inc (hl)
  ld a,(hl)
  cp $3A
  jr z,-_
strround_done:
  pop hl
  ld (hl),'e'
  inc hl
  ld de,(pow10exp)
  bit 7,d
  jr z,+_
  ld (hl),$1A    ;negative sign
  inc hl
  xor a
  sub e
  ld e,a
  sbc a,a
  sub d
  ld d,a
_:
  push hl
  ex de,hl
  ld bc,-1000
  ld a,'0'-1
  or a
_:
  inc a
  add hl,bc
  jr c,-_
  sbc hl,bc
  cp $30
  jr z,+_
  ld (de),a
  inc de
_:

  ld bc,-100
  ld a,'0'-1
_:
  inc a
  add hl,bc
  jr c,-_
  sbc hl,bc
  ld (de),a
  inc de

  ld bc,$2F0A
  ld a,l
_:
  inc b
  sub c
  jr nc,-_
  ex de,hl
  ld (hl),b
  inc hl
  add a,$3A
  ld (hl),a
  inc hl
  xor a
  ld (hl),a
  pop de
  ld h,d
  ld l,e
  ld a,'0'
_:
  cpi
  jr z,-_
  dec hl
  call mov4
  ld hl,strout-1
  ret
movdec:
  ld hl,(pow10exp)
  bit 7,h
  jr z,posdec
;need to put zeroes before everything
  ld de,strout
  ld a,(de)
  cp $1A    ;negative sign
  push af
  ld a,'0'
  jr z,$+3
_:
  dec de
  ld (de),a
  inc l
  jr nz,-_
  inc h
  jr nz,-_
_:
  ld a,'.'
  ld (de),a
  pop af
  ex de,hl
  jr nz,+_
  dec hl
  ld (hl),a
_:
  pop de
  xor a
  ld (de),a
  ret
posdec:
  ld hl,strout
  ld de,strout-1
  ld a,(hl)
  ld bc,(pow10exp)
  cp $1A    ;negative sign
  jr nz,$+3
  inc bc
  inc bc
  ldir
  pop hl
  ex de,hl
  ld (hl),'.'
  xor a
  ld (de),a
  ld hl,strout-1
  ret
strcase:
  ld de,str_Zero
  ld a,(fpOP1+7)
  and $C0
  jr z,+_
  ld de,str_Inf
  jp pe,+_
  ld de,str_NaN
_:
  ex de,hl
  call mov4
  ld hl,strout
  ret
xtostr_mul:
  add hl,hl
  push hl
  call c,+_
  ld hl,10
  add hl,de
  ex de,hl
  pop hl
  ret
_:
  ld h,b
  ld l,c
  jp xmul
xtostrmul10:
;multiply the 0.64 fixed point number at fpOP1 by 10
;overflow in A register
  ld hl,fpOP1
  ld de,fpOP2
  call mov9
  xor a
  inc hl \ sla (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  rla
  ld hl,fpOP2
  sla (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  rla
  push af
  ld de,fpOP1
  ld hl,fpOP2
  call add64
  pop hl
  ld a,h
  adc a,0
  ld hl,fpOP1
  sla (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  inc hl \ rl (hl)
  rla
  ret
#include "../extended/mul/fpOP1mul10.z80"
