#define var_a fpOP3+100   ;was +42
#define var_g var_a+10
#define var_a0 var_a+20
#define var_a1 var_a+30
#define var_a2 var_a+40
#define var_a3 var_a+50
#define var_a4 var_a+60
#define var_a5 var_a+70

;This is an accelerated Borchardt-Gauss algorithm
;It is used in computing inverse trancendentals and the like.
;
;Basic outline:
;  a0 is the initial a
;  g0 is the initial g
;  compute a_(n+1) = (a_n+g_n)/2
;  compute a_(g+1) = (a_(n+1)+g_n)/2
;
;Then return the sum of:
; a6 * 4398046511104  = a6 * 2^42
;-a5 * 1465657589760  = a5 * 2^30 * 3*5*7*13 =a5 * 2^30 * 3*7*65
;+a4 * 97615085568    = a4 * 2^20 * 3*7*11*13*31 = a4 * 2^20 * 7*13*(2^10-1)
;-a3 * 1543393280     = a3 * 2^12 * 5*11*13*17*31 = a3 * 2^12 * 13*17*31*65
;+a2 * 5957952        = a2 * 2^6  * 3*7*11*13*31
;-a1 * 5460           = a1 * 2^2  * 3*5*7*13
;+a0
;all divided by: 3028466566125
xbg:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  pop de
  ld hl,fpOP2
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push de
  ld de,var_a
  call mov10
  pop hl
  call mov10
	ld hl,(var_a+8)
	ld de,(var_g+8)
	ld a,h
	or d
  jp m,bg_NaN
	ld a,h \ or l \ jp z,casebg
	ld a,d \ or e \ jp z,casebg2
  ld hl,var_a
  ld de,var_a0
  call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean
  ld b,h \ ld c,l \ call xgeomean
  ld hl,var_a1 \ ex de,hl \ call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean
  ld b,h \ ld c,l \ call xgeomean
  ld hl,var_a2 \ ex de,hl \ call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean
  ld b,h \ ld c,l \ call xgeomean
  ld hl,var_a3 \ ex de,hl \ call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean
  ld b,h \ ld c,l \ call xgeomean
  ld hl,var_a4 \ ex de,hl \ call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean
  ld b,h \ ld c,l \ call xgeomean
  ld hl,var_a5 \ ex de,hl \ call mov10

  ld de,var_a \ ld b,d \ ld c,e \ call xamean   ;a7

;Now we are going to adjust the exponents
  ld hl,(var_a1+8)
  ld a,l
  add a,2
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a1+8),hl
  ld hl,(var_a2+8)
  ld a,l
  add a,6
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a2+8),hl
  ld hl,(var_a3+8)
  ld a,l
  add a,12
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a3+8),hl
  ld hl,(var_a4+8)
  ld a,l
  add a,20
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a4+8),hl
  ld hl,(var_a5+8)
  ld a,l
  add a,30
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a5+8),hl
  ld hl,(var_a+8)
  ld a,l
  add a,42
  ld l,a
  jr nc,+_
  inc h
  jp m,bg_Zero
_:
  ld (var_a+8),hl

;Next, multiply a3 by 85
  ld hl,var_a3
  ld b,h
  ld c,l
  call xmul5
  call xmul17

  ld hl,var_a1
  ld de,var_a5
  ld b,h
  ld c,l
  call xadd
  call xmul3
  call xmul5
  call xmul7


  ld hl,var_a2
  ld de,var_a4
  ld b,h
  ld c,l
  call xadd
  call xmul3
  call xmul7

  ld de,var_a3
  call xsub
;  call xmul11
;  call xmul31
  ld de,const_341
  call xmul

  ld de,var_a1
  call xsub
;  call xmul13
  ld de,const_13
  call xmul
  ld de,var_a
  ld bc,fpOP2
  call xadd
  ld h,b
  ld l,c
  ld de,var_a0
  call xadd
  ex de,hl
  ld hl,const_3028466566125
  jp xdiv
casebg:
;1/bg(0,x)    -> is actually permissable
;1/bg(inf,x)  -> 0
;1/bg(inf,inf)-> 0
;1/bg(0,inf)  -> 0 *** Not NaN, even though bg(inf,0)==NaN
;1/bg(0,0)    -> NaN
;1/bg(NaN,*)  -> NaN
;1/bg(inf,NaN)-> NaN
;1/bg(inf,0)  -> NaN
;1/bg(0,NaN)  -> NaN

  ret
casebg2:
;1/bg(x,NaN)  -> NaN
;1/bg(x,0)    -> NaN
;1/bg(x,inf)  -> 0
  ld a,(var_g+7)
  add a,a
  jr nc,bg_NaN
  add a,a
  jr nc,bg_NaN
bg_Zero:
  xor a
  ld h,a
  ld l,a
  ld (fpOP1+8),hl
  ld (fpOP1+7),a
  ret
bg_NaN:
  ld hl,0
  ld (fpOP1+8),hl
  ld a,$40
  ld (fpOP1+7),a
  ret
const_341:
  .db $00,$00,$00,$00,$00,$00,$80,$AA \ .dw $4008
const_13:
  .db $00,$00,$00,$00,$00,$00,$00,$D0 \ .dw $4003
bg_disp_g:
  push hl \ push de \ push bc
  strx(fpOP1,fpOP1)
  ld h,b
  ld l,c
  call puts
  pop bc \ pop de \ pop hl
  ret
xmul3:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov8
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  inc (hl)
  jr nz,+_
  inc (hl)
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  call srlfpOP1_mantissa
  jp _addshiftstepin
xmul5:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov8
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  ld a,(hl) \ add a,2 \ ld (hl),a
  jr nc,+_
  inc (hl)
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
_addshiftstepin:
  pop de
  push de
  ex de,hl
  call adc64
  pop hl
  ret nc
; Need to shift down, but also increment exponent
  ex de,hl
  call rr64
  ex de,hl
  inc (hl)
  ret nz
  inc hl
  inc (hl)
  ld a,(hl)
  and $7F
  ret nz
  jp setfpOP1_inf
rr64:
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
xmul7:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  ld a,(hl) \ add a,4 \ ld (hl),a
  ld e,a
  inc hl
  ld a,(hl)
  jr nc,+_
  inc a
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  ld d,a
  ld (fpOP1+8),de
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  pop de
  ;need (DE)-(HL) -> (hl)
  call rsbc64
  jp nc,normalizefpOP1
  jp fpOP1_subunder
xmul17:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov8
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  ld a,(hl) \ add a,4 \ ld (hl),a
  jr nc,+_
  inc (hl)
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  jp _addshiftstepin
xmul31:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  ld a,(hl) \ add a,6 \ ld (hl),a
  ld e,a
  inc hl
  ld a,(hl)
  jr nc,+_
  inc a
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  ld d,a
  ld (fpOP1+8),de
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  pop de
  ;need (DE)-(HL) -> (hl)
  call rsbc64
  jr nc,normalizefpOP1
fpOP1_subunder:
;need to increment exponent, negate mantissa, then normalize
  ld hl,fpOP1
  call neg64
_:
  ld hl,(fpOP1+8)
  dec hl
  ld (fpOP1+8),hl
normalizefpOP1:
  ld a,(fpOP1+7)
  add a,a
  ret c
  ld hl,fpOP1
  sla (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl)
  jp -_
xmul13:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  pop de
  ld a,(hl) \ add a,5 \ ld (hl),a
  ld c,a
  inc hl
  ld a,(hl)
  jr nc,+_
  inc a
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  ld b,a
  ld (fpOP1+8),bc
  ;subtract ((>>1) and (>>0))>>3
  call srlfpOP1_mantissa
  push de
  ex de,hl
  call adc64
  call c,fpOP1_addover
  call srlfpOP1_mantissa    ;1.5
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa    ;.1875
  pop de
  ;need to subtract (DE)-(HL) -> (HL)
  call rsbc64
  jp nc,normalizefpOP1
  jp fpOP1_subunder
fpOP1_addover:
  push hl
  push af
  ld hl,(fpOP1+8)
  inc hl
  ld (fpOP1+8),hl
  ld a,h
  xor $7F
  or l
  jr z,+_
  scf
  call nc,rr64
  pop af
  pop hl
  ret
_:
  dec a
  ld (fpOP1+7),a
  pop af
  pop hl
  ret
srlfpOP1_mantissa:
  ld hl,fpOP1+7
srl64:
  srl (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
xmul11:
  push hl
  push de
  push bc
  push af
  push bc
  call +_
  ld hl,fpOP1
  pop de
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
  push hl
  ld de,fpOP1
  call mov8
  pop de
  ld a,(hl) \ add a,5 \ ld (hl),a
  ld c,a
  inc hl
  ld a,(hl)
  jr nc,+_
  inc a
  ld a,(hl)
  and $7F
  jp z,setfpOP1_inf
_:
  ld b,a
  ld (fpOP1+8),bc
  call srlfpOP1_mantissa
  call srlfpOP1_mantissa
  push de
  ex de,hl
  call adc64
  call c,fpOP1_addover      ;1.25
  call srlfpOP1_mantissa    ;.625
  call srlfpOP1_mantissa    ;.3125
  pop de
  ;need to subtract (DE)-(HL) -> (HL)
  call rsbc64
  jp nc,normalizefpOP1
  jp fpOP1_subunder
rsbc64:
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a \ inc hl \ inc de
  ld a,(de) \ sbc a,(hl) \ ld (hl),a
  ret
setfpOP1_inf:
  xor a
  ld h,a
  ld l,a
  dec a
  ld (fpOP1+8),hl
  ld (fpOP1+7),a
  ret
neg64:
  xor a
  ld c,a \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a \ inc hl
  ld a,c \ sbc a,(hl) \ ld (hl),a
  ret
