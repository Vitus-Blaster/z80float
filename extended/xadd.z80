xamean:
  push hl
  push de
  push bc
  push af
  push bc
  ld bc,fpOP1
  call xadd
  ld hl,(fpOP1+8)
  ld a,h
  and $7F
  or l
  jr z,+_
  dec hl
  ld (fpOP1+8),hl
  ld a,h
  and $7F
  or l
  jr nz,+_
  ld (fpOP1+7),a
_:
  ld hl,fpOP1
  pop de
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
xsub:
;Input:
;  HL points to one number
;  DE points to another

  push hl
  push de
  push bc
  push af
  push bc
  call +_
  pop de
  ld hl,fpOP3
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
;copy the inputs to fpOP2 and fpOP3, leaving fpOP1 open for shifting
  push de
  ld de,fpOP2
  call mov10
  dec de
  ld a,(de)
  xor 80h
  ld (de),a
  inc de
  pop hl
  call mov10
  jp subadd_stepin
xrsub:
;Input:
;  HL points to one number
;  DE points to another

  push hl
  push de
  push bc
  push af
  push bc
  call +_
  pop de
  ld hl,fpOP3
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
;copy the inputs to fpOP2 and fpOP3, leaving fpOP1 open for shifting
  push de
  ld de,fpOP2
  call mov10
  pop hl
  call mov10
  dec de
  ld a,(de)
  xor 80h
  ld (de),a
  jp subadd_stepin

xadd:
;Input:
;  HL points to one number
;  DE points to another

  push hl
  push de
  push bc
  push af
  push bc
  call +_
  pop de
  ld hl,fpOP3
  call mov10
  pop af
  pop bc
  pop de
  pop hl
  ret
_:
;copy the inputs to fpOP2 and fpOP3, leaving fpOP1 open for shifting
  push de
  ld de,fpOP2
  call mov10
  pop hl
  call mov10
subadd_stepin:
	ld de,(fpOP2+8)
	ld hl,(fpOP3+8)
  res 7,h
  res 7,d
  xor a
  ld (fpOP2-1),a
  ld a,h
  or l
  jp z,caseadd
  ld a,d
  or e
  jp z,caseadd1
; Now make sure fpOP3 has the bigger exponent
  sbc hl,de
  jr nc,+_
  xor a
  sub l
  ld l,a
  sbc a,a
  sub h
  ld h,a
  push hl
  call swapfpOP2fpOP3   ;need to swap fpOP2 and fpOP3
  pop hl
_:
  ld a,h
  or a
  ret nz
  ld a,l
  cp 66
  ret nc
;Now we need to shift down by A bits.
  or a
  jr z,add_shifted
  rra \ call c,srlfpOP2_mantissa
  rra \ call c,srl2fpOP2_mantissa
  rra \ call c,srl4fpOP2_mantissa
  and $1F
  ld l,a
  ld bc,(fpOP2&255)-1
  ld h,fpOP2>>8
  add hl,bc
  sub 10
  cpl
  ld c,a
  ld de,fpOP2-1
  ldir
  ld c,a
  ld a,9
  sub c
  jr z,add_shifted
  ld b,a
  xor a
  ld (de),a \ inc de \ djnz $-2
add_shifted:
;If the signs match, then just add
;If they differ, then subtract
	ld hl,fpOP2+9
	ld a,(fpOP3+9)
  xor (hl)
  jp p,xadd_add
;subtract the mantissas
  xor a
  ld hl,fpOP2-1
  sub (hl)
  ld (hl),a
  inc hl
  ld de,fpOP3
  call sbc64
  jr nc,+_
  ;now we need to negate the mantissa, invert the sign
  inc hl
  inc hl
  ld a,(hl)
  xor 80h
  ld (hl),a
  ld hl,fpOP2-1
  xor a
  ld c,a
  sub (hl)
  ld (hl),a
  ld hl,fpOP3
  ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
  inc hl \ ld a,c \ sbc a,(hl) \ ld (hl),a
_:
  ret m
;need to shift up until top bit is 1. Should be at most 1 shift, I think


  ld de,(fpOP3+8)
  ld a,(fpOP2-1)
  ld hl,fpOP3-1
  ld (hl),a
;We need to make sure that the mantissa isn't zero
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  inc hl \ or (hl) \ jr nz,+_
  ld h,a
  ld l,a
  ld (fpOP3+8),hl
  ret
_:
  dec de
  ld a,d
  and $7F
  or e
  jp z,add_zero

  ld hl,fpOP3-1
  sla (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl) \ inc hl
  rl (hl)
  jp p,-_
  ld (fpOP3+8),de
  ret
xadd_add:
  ;add the mantissas
  ld hl,fpOP2-1
  rl (hl)
  inc hl
  ld de,fpOP3
  call adc64
  ret nc
  ex de,hl
  inc hl
  inc (hl) \ jr nz,+_
  inc hl
  inc (hl)
  dec hl
  ld a,(hl)
  and $7F
  jr z,add_inf
  scf
_:
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  dec hl \ rr (hl)
  ret
srl4fpOP2_mantissa:
  ld hl,fpOP2+7
  xor a
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd \ dec hl
  rrd
  ret
srl2fpOP2_mantissa:
  call srlfpOP2_mantissa
srlfpOP2_mantissa:
  ld hl,fpOP2+7
  srl (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl) \ dec hl
  rr (hl)
  ret
caseadd:
;zero+x => x for all x
;NaN +x => NaN for all x
;inf-inf=> NaN
;inf +x => inf, x != inf
  ret
caseadd1:
;x+zero => x
;x+inf  => inf
;x+NaN  => NaN
  ret
add_zero:
  xor a
  ld (fpOP3+7),a
  ld h,a
  ld l,a
  ld (fpOP3+8),hl
  ret
add_inf:
  xor a
  ld (fpOP3+7),a
  dec a
  ld h,a
  ld l,a
  ld (fpOP3+8),hl
  ret
.echo "xadd: ",$-xadd
