#define var_x xOP2   ;output
#define var_b xOP2   ; 4 bytes, result gets copied to bottom anyways
#define var_n xOP3


div64_32:
;var_n / var_x
;HLDE is the remainder
;BCIX is the quotient
;440+2{0,96}+2*div32_16+2*mul16
;min: 2408cc
;max: 3908cc
;avg: 3356.274cc
  ld hl,(var_n+6)
  ld de,(var_n+4)
  ld bc,(var_x+6)
  call div32_16
  push de

;Need to adjust the remainder
  push hl
  ld bc,(var_x+4)
  call mul16

  ;DEHL
  ld b,d
  ld c,e
  ex de,hl
  ld hl,(var_n+2)
  or a
  sbc hl,de
  ex de,hl
  pop hl
  sbc hl,bc
  jr nc,+_
  pop bc
  dec bc
  push bc
  ld bc,(var_x+4)
  ex de,hl
  add hl,bc
  ld bc,(var_x+6)
  ex de,hl
  adc hl,bc
_:
;HLDE is the new remainder
  ld bc,(var_x+6)
  call div32_16
  push de

;Need to adjust the remainder
;(HL:(00-DE*(var_x+4))
  push hl
  ld bc,(var_x+4)
  call mul16

  ;DEHL
  ld b,d
  ld c,e
  ex de,hl
  ld hl,(var_n)
  or a
  sbc hl,de
  ex de,hl
  pop hl
  sbc hl,bc
  jr nc,+_
  pop bc
  dec bc
  push bc
  ld bc,(var_x+4)
  ex de,hl
  add hl,bc
  ld bc,(var_x+6)
  ex de,hl
  adc hl,bc
_:
;HLDE is the new remainder
  pop ix
  pop bc
  ret
.echo "  div64_32: +",$-div64_32
div32_32:
;228+{0,115}+2*div32_16+mul16
;min: 1982cc
;max: 2952cc
;avg: 2560.887cc
;HLDE/(var_x+4)
  ld bc,(var_x+6)
  call div32_16
  ld (var_b+2),de   ;top 16-bit digit
;Need to adjust the remainder
;(HL:00-DE*(var_x+4))
  push hl
  ld bc,(var_x+4)
  call mul16

  ;DEHL
  ld b,d
  ld c,e
  ex de,hl
  pop hl
  ;BCDE
  xor a
  sub e
  ld e,a
  ld a,0
  sbc a,d
  ld d,a
  sbc hl,bc
  jr nc,+_
  ld bc,(var_b+2)
  dec bc
  ld (var_b+2),bc
  ld bc,(var_x+4)
  ex de,hl
  add hl,bc
  ld bc,(var_x+6)
  ex de,hl
  adc hl,bc
_:
;HLDE is the new remainder
  ld bc,(var_x+6)
  call div32_16
  ld (var_b),de   ;low 16-bits
  ret
.echo "  div32: +",$-div32_32
div32_16:
;HLDE/BC
;770+16{0,10}+{0,20+{0,21}}
;min: 770
;max: 971
;avg: 865.25

  push bc
  ld a,b
  srl a
  cpl
  ld b,a
  ld a,c
  rra
  cpl
  ld c,a
  inc bc
  ld a,d
  add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  ld d,a
  ld a,e
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl \ add hl,bc \ jr c,$+4 \ sbc hl,bc
  rla \ adc hl,hl
  ld e,a
  pop bc
  bit 0,c
  ret z
;HL is the remainder
;r-Q*E = HL-DE
  sbc hl,de
  ret nc
  add hl,bc
  dec de
  ret
.echo "  div32_16: +",$-div32_16
divide16:
;max: 958cc
;min: 663cc
;avg: 783.25cc
  xor a
  add hl,hl \ jp c,div16_0_2
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_1_2
div16_1_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_2_2
div16_2_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_3_2
div16_3_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_4_2
div16_4_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_5_2
div16_5_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_6_2
div16_6_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_7_2
div16_7_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jp c,div16_8_2
div16_8_1:
  ld d,a
  xor a
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_9_2
div16_9_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_10_2
div16_10_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_11_2
div16_11_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_12_2
div16_12_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_13_2
div16_13_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_14_2
div16_14_1:
  sbc hl,bc \ jr nc,$+3 \ add hl,bc \ rla \ add hl,hl \ jr c,div16_15_2
div16_15_1:
  add a,a
  ld e,a
  sbc hl,bc \ ret nc \ add hl,bc \ inc e \ ret

div16_0_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_1_1
div16_1_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_2_1
div16_2_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_3_1
div16_3_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_4_1
div16_4_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_5_1
div16_5_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_6_1
div16_6_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jp nc,div16_7_1
div16_7_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_8_1
div16_8_2:

  ld d,a
  xor a \ sbc hl,bc \ add hl,hl \ jr nc,div16_9_1
div16_9_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_10_1
div16_10_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_11_1
div16_11_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_12_1
div16_12_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_13_1
div16_13_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_14_1
div16_14_2:
  add a,a \ sbc hl,bc \ add hl,hl \ jr nc,div16_15_1
div16_15_2:
  add a,a \ ld e,a \ sbc hl,bc \ ret
.echo "  div16: +",$-divide16
#undefine var_x
#undefine var_b
